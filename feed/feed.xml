<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>Chris&#39; blog</title>
	<subtitle>I am writing about my experiences as a naval navel-gazer.</subtitle>
	<link href="https://cdrn.github.io/feed/feed.xml" rel="self"/>
	<link href="https://cdrn.github.io/"/>
	<updated>2023-08-03T00:00:00Z</updated>
	<id>https://cdrn.github.io</id>
	<author>
		<name>Chris</name>
		<email>chrisdoran@protonmail.com</email>
	</author>
	
	<entry>
		<title>Indexing ethereum contract data pt 1.</title>
		<link href="https://cdrn.github.io/blog/slurpingcontractdatapt1/"/>
		<updated>2023-08-03T00:00:00Z</updated>
		<id>https://cdrn.github.io/blog/slurpingcontractdatapt1/</id>
		<content type="html">&lt;p&gt;I recently gave a talk at &lt;a href=&quot;https://ethmelbourne.co/&quot;&gt;eth melbourne&lt;/a&gt; in which i gave some tips and tricks for indexing eth contract data, as well as a brief overview of exactly &lt;em&gt;what&lt;/em&gt; contract data is on ethereum and a quick dive into the EVM. In the interest of sharing, I&#39;d like to condense my talk down into a series of blog posts.&lt;/p&gt;
&lt;h3 id=&quot;what-is-contract-data&quot; tabindex=&quot;-1&quot;&gt;What is contract data? &lt;a class=&quot;header-anchor&quot; href=&quot;https://cdrn.github.io/blog/slurpingcontractdatapt1/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First of all, if you&#39;re not really familiar with what a smart contract is on Ethereum (and in general), there are plenty of resources out there to get up to speed. I won&#39;t be covering that in this post, but you can look &lt;a href=&quot;https://ethereum.org/en/smart-contracts/#:~:text=Smart%20contracts%20are%20the%20fundamental,if%20this%20then%20that%20structure&quot;&gt;here&lt;/a&gt; for a choose your own difficulty explanation. What I want to talk about specifically is what we mean by &lt;em&gt;contract data&lt;/em&gt; and talk a little bit about how the EVM handles memory, but more specifically &lt;em&gt;storage&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;great-so-what-is-contract-storage&quot; tabindex=&quot;-1&quot;&gt;Great, so what is contract storage? &lt;a class=&quot;header-anchor&quot; href=&quot;https://cdrn.github.io/blog/slurpingcontractdatapt1/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All of the data in Ethereum is held in a global state tree, in the form of a &lt;em&gt;Patricia Merkle Tree&lt;/em&gt;. We&#39;ll talk a little bit more about this later, but for an ethereum smart contract developer it essenitally functions as a key value store.&lt;/p&gt;
&lt;p&gt;From the perspective of said developer, &lt;code&gt;storage&lt;/code&gt; is just a data store that can be used to persist state between block/contract calls. Storage is often used judiciously as it becomes very expensive very quickly. In fact, evm.codes indicates that calls to &lt;code&gt;SSTORE&lt;/code&gt; and &lt;code&gt;SLOAD&lt;/code&gt; are justifiably &lt;a href=&quot;https://www.evm.codes/#54?fork=shanghai&quot;&gt;30 times more expensive&lt;/a&gt; than their in memory counterparts. Thus, as of the time of writing, storage is reserved for memory that absolutely must be persisted in ethereum state.&lt;/p&gt;
&lt;p&gt;In solidity, calls to storage are obvious and look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-solidity&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-solidity&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;storage&lt;/span&gt; _arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find about a million examples of this online, but suffice to say if you are declaring a variable as &lt;code&gt;storage&lt;/code&gt;, operating on it will be expensive!&lt;/p&gt;
&lt;h3 id=&quot;ethereum-state-tree&quot; tabindex=&quot;-1&quot;&gt;Ethereum state tree &lt;a class=&quot;header-anchor&quot; href=&quot;https://cdrn.github.io/blog/slurpingcontractdatapt1/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, we know that our &lt;code&gt;storage&lt;/code&gt; calls are being persisted somewhere on the blockchain consistently between all clients, but we don&#39;t yet know how ethereum handles said state. As alluded to earlier, all of Ethereum&#39;s state is bound up in a Patricia Merkle tree which we can dive a little deeper into to further our understanding of the system.&lt;/p&gt;
&lt;p&gt;Like all good tree implementations, the Patricia Merkle Tree is about balancing retrieval, insertion and traversal time. As the word &lt;em&gt;merkle&lt;/em&gt; implies however, this data structure has a fourth important property &lt;em&gt;cryptographic verifiability&lt;/em&gt;. Essentially what it boils down to is this: Given a piece of state and a &lt;code&gt;state root hash&lt;/code&gt;, any node can verify the integrity of that state by computing the chain of hashes along the branch of the patricia merkle tree which connects that transaction all the way back to the state root. Powerfully, this means a couple of things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clients can be sure that a state such as the balance of their account is authentic without having to hold the entire state of the ethereum blockchain on their local machine (To date over 100GB including merkle proofs).&lt;/li&gt;
&lt;li&gt;Clients can efficiently enough retrieve and insert new states to the state tree while preserving the above principal. As we recall from our leetcodes, trie insertion time and look up is o(k) (very fast!) where K is the input size  -- in this case, clipped at 20 bytes which is the size of an ethereum address! Pretty genius!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The actual implementation of the state tree is quite inspired, and i&#39;d recommend you look &lt;a href=&quot;https://blog.ethereum.org/2015/11/15/merkling-in-ethereum&quot;&gt;here&lt;/a&gt; if you&#39;re interested in finding out more. For the purposes of this post however, all you need to understand is that in Ethereum it&#39;s functioning as a key value store with some very interesting properties, where all the keys are 20 byte ethereum contract addresses, and some of the values are the contract data we&#39;re interested in. Neat!&lt;/p&gt;
&lt;h3 id=&quot;part-2-coming-soon&quot; tabindex=&quot;-1&quot;&gt;Part 2 (Coming soon) &lt;a class=&quot;header-anchor&quot; href=&quot;https://cdrn.github.io/blog/slurpingcontractdatapt1/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In part two we&#39;ll discuss your options for stealing all of that yummy free contract data, why you&#39;d want to and how your approach might change depending on what you&#39;re building.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>This is my fourth post.</title>
		<link href="https://cdrn.github.io/blog/fourthpost/"/>
		<updated>2018-09-30T00:00:00Z</updated>
		<id>https://cdrn.github.io/blog/fourthpost/</id>
		<content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://cdrn.github.io/img/IdthKOzqFA-350.avif 350w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://cdrn.github.io/img/IdthKOzqFA-350.webp 350w&quot;&gt;&lt;img alt=&quot;A possum parent and two possum kids hanging from the iconic red balloon&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://cdrn.github.io/img/IdthKOzqFA-350.png&quot; width=&quot;350&quot; height=&quot;685&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2 id=&quot;section-header&quot; tabindex=&quot;-1&quot;&gt;Section Header &lt;a class=&quot;header-anchor&quot; href=&quot;https://cdrn.github.io/blog/fourthpost/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
</content>
	</entry>
</feed>
